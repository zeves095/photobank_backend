<?php
namespace App\Tests\Service;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use App\Service\ResourceService;
use App\Service\ImageProcessorService;
use App\Entity\Resource;
use App\Entity\CatalogueNodeItem;

class ImageProcessorServiceTest extends WebTestCase
{

  public function setUp()
  {
      self::bootKernel();
      $container = self::$container;

      $this->entityManager = self::$container->get('doctrine.orm.default_entity_manager');
      $this->resourceService = self::$container->get('App\Service\ResourceService');
      $this->serviceContainer = self::$container->get('service_container');
      $this->fileSystem = self::$container->get('filesystem');

      $correctItem = $this->entityManager->getRepository(CatalogueNodeItem::class)->findOneBy([]);
      $correctResource = $this->entityManager->getRepository(Resource::class)->findOneBy([]);
      $this->correctResource = [
        'id'=>$correctResource->getId(),
        'priority'=>$correctResource->getPriority(),
        'type'=>$correctResource->getType(),
      ];
      $this->correctItem = [
        'object'=>$correctItem,
        'id'=>$correctItem->getId(),
      ];
  }

  public function getService(){
    $entityManager = $this->entityManager;
    $resourceService = $this->resourceService;
    $serviceContainer = $this->serviceContainer;
    $fileSystem = $this->fileSystem;
    $service = new ImageProcessorService($entityManager,$serviceContainer,$resourceService,$fileSystem);
    return $service;
  }

  public function testProcessPreset()
  {
    $imageProcessor = $this->getService();

    $mockResource = new Resource();
    $mockResource->setItem($this->correctItem['object']);
    $mockResource->setExtension('jpg');
    $mockResource->setPath('/../../../tests/mock/img/testimg.jpg');
    $mockResource->setType('1');
    $mockResource->setUsername('username');
    $mockResource->setSizeBytes('100');
    $mockResource->setPreset('0');
    $mockResource->setChunkPath('test/path/to/chunk/');
    $mockResource->setFilename('filename.jpg');
    $mockResource->setSrcFilename('src_filename.jpg');
    $mockResource->setGid(99999999);
    $mockResource->setAutogenerated(false);
    $mockResource->setCreatedOn(date_create()->format('Y-m-d H:i:s'));
    $this->entityManager->persist($mockResource);
    $this->entityManager->flush($mockResource);

    try{
      $response = $imageProcessor->processPreset($mockResource->getId(),1);
      $this->assertTrue($response);
      $newResource = $this->entityManager->getRepository(Resource::class)->findOneBy(['gid'=>$mockResource->getId()]);
      $this->assertInstanceOf(Resource::class, $newResource);
    }catch(\App\Exception\DeadMountException $e){
      printf("\n Для успешного теста в тестовой директории загрузок должен лежать файл с названием 'livemount'");
    }
  }

  public function testProcessCustom()
  {
    $imageProcessor = $this->getService();
    $mockId = $this->correctResource['id'];
    $mockSizePx = "50/50";
    $mockTarget = self::$container->getParameter('test_mock_dir')."/generated/testimg_preset.jpg";
    $imageProcessor->processCustom($mockId,$mockSizePx,$mockTarget);
    $this->assertFileExists(self::$container->getParameter('test_mock_dir')."/generated/testimg_preset.jpg");
  }
}
