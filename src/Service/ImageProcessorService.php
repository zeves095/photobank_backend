<?php

namespace App\Service;

use Doctrine\ORM\EntityManagerInterface;
use App\Entity\Resource;
use App\Service\ResourceService;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\DependencyInjection\ContainerInterface;
use \Imagine\Imagick\Imagine;
use \Imagine\Image\Box;
use \Imagine\Image\ImageInterface;

class ImageProcessorService{

  private $entityManager;
  private $container;
  private $resourceService;

  public function __construct(EntityManagerInterface $entityManager, ContainerInterface $container, ResourceService $resourceService){
    $this->entityManager = $entityManager;
    $this->container = $container;
    $this->resourceService = $resourceService;
  }

  public function queue($resourceId, $preset){
    return true;
  }

  public function process($resourceId, $presetId){

    $repository = $this->entityManager->getRepository(Resource::class);
    $processed = $repository->findBy(['gid'=>$resourceId]);
    $resource = $repository->findOneBy(['id'=>$resourceId]);

    $processedPresets = array();
    foreach($processed as $p){
      array_push($processedPresets, $p->getPreset());
    }
    if(!in_array($presetId, $processedPresets)){
      $this->_savePreset($resource,$presetId);
    }

    return true;
  }

  private function _savePreset($resource, $presetId){
    $extension = $resource->getExtension();
    foreach($this->container->getParameter('presets') as $p){
      if($p['id'] == $presetId){
        $preset = $p;
      }
    }
    $imageProcessor = new Imagine();
    $size = new Box($preset['width'],$preset['height']);
    $mode = ImageInterface::THUMBNAIL_INSET;
    $targetPath = $this->container->getParameter('upload_directory').'/imgproc/'.$resource->getId().'_'.$preset['name'].'.'.$extension;
    $imageProcessor->open($resource->getPath())
    ->thumbnail($size, $mode)
    ->save($targetPath);

    $filename = $this->resourceService->getUniqueIdentifier(file_get_contents($targetPath), $resource->getItem()->getId(),filesize($targetPath)).'.'.$extension;

    $resourceParameters = [
      'item_id' => $resource->getItem(),
      'extension' => $extension,
      'path' => $targetPath,
      'username' => $resource->getUsername(),
      'filesize' => filesize($targetPath),
      'preset' => $preset['id'],
      'chunkPath' => $resource->getChunkPath(),
      'filename' => $filename,
      'src_filename' => $resource->getSrcFilename(),
      'gid' => $resource->getId(),
      'autogenerated'=>true,
      'type'=>4,
    ];

    $this->resourceService->processCompletedUpload($resourceParameters);
  }

}
