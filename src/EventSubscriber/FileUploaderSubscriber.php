<?php
/**
 * Обработчик события после успешной загрузки файла.
 */
namespace App\EventSubscriber;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use PhotoBank\FileUploaderBundle\Event\FileUploadedEvent;
use PhotoBank\FileUploaderBundle\Service\UploadRecordManager;
use App\Service\ResourceService;
use Symfony\Component\Translation\TranslatorInterface;
/**
 * Обработчик события после успешной загрузки файла.
 */
class FileUploaderSubscriber implements EventSubscriberInterface
{
  /**
   * Сервис работы с сущнстями типа "Resource"
   */
  private $resourceService;

  /**
   * Конструктор класса
   * @param ResourceService $resourceService Для работы с сущностями типа "Resource"
   */
  public function __construct(ResourceService $resourceService){
    $this->resourceService = $resourceService;
  }

/**
 * Присваивает ключам сообщений соответсвующие методы
 */
  public static function getSubscribedEvents()
  {
    return array(
     'fileuploader.uploaded' => array('processUpload',0),
    );
  }

  /**
   * Собирает параметры для создания нового ресурса и отправляет их в resourceService
   *
   * @param  FileUploadedEvent $event Событие, создаваемое при успешной загрузке файла
   */
  public function processUpload(FileUploadedEvent $event)
  {
    $id = $event->getParams()['item_id'];

    if(preg_match('/^\d{11}$/', $id)) {
        $resourceParameters = [
            'item_id' => $event->getParams()['item_id'],
            'extension' => $event->getParams()['extension'],
            'path' => $event->getParams()['path'],
            'type' => $event->getParams()['type'],
            'username' => $event->getParams()['username'],
            'filesize' => $event->getParams()['filesize'],
            'preset' => $event->getParams()['preset'],
            'chunkPath' => $event->getParams()['chunkPath'],
            'filename' => $event->getParams()['filename'],
            'src_filename' => $event->getParams()['src_filename'],
            'gid' => $event->getParams()['gid'],
            'autogenerated'=>$event->getParams()['autogenerated']
          ];
          $this->resourceService->processCompletedUpload($resourceParameters);
    }else{
        //@todo:  Тут вообще должна быть ЖУУУТКАЯ ошибка - так как НЕТ идентификатора с нужным форматом
        throw new \Exception('Не верный формат идентификатора каталога');
    }
  }
}
